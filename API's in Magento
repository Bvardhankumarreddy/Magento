The Magnto web API framework provides integrators and developers the means to use web services that communicate with the Magento system. Key features 
include:

=> Support GraphQL, REST (Representational State Transfer) and SOAP (Simple Object Access Protocol). In Magento Web API coverage is the same for both REST
and SOAP.

There are three types of authentiation:

1) Third part applications authenticate with OAuth 1.0a.
2) Mobile applications authenticate using tokens.
3) Adminstrators and Customersmare authenticated with login credintals.

=> All accounts and integrations are assigned resources that they have access to. The API framework checks that any call has the authorization to perform the
request.

=> Any magento or third-party service can be configured as "webAPI" with afew lines of xml. To configure a webapi you define XML elements and attributes 
in a "webapi.xml" configuration file. If a service is not defined in a configuration file, it will not be exposed at all.

=>The framework is based on the CURD(create, update, read, delete) & search model. The system does not currently support webhooks.

=> The framework supports field filtering of web API responses to conserve mobile bandwidth.

=> Integartion style web APIs enable a single web API call to run multiple services at once for a efficient integration. An example of this behaviour can be
seen in the catalog. Where one web API call can create a product. If your payload includes the stock_item and media_gallery_entries objects, then the 
framework will also create the products inventory and media in that one API call.

What can I do with the Magento web APIs?

The APIs can be used to perform a wide array of tasks. For example:

1) Creating a shopping app. This can be a additional app that a user downloads on a mobile device. You could also create an app that an employee uses
on a showroom floor to help customers make purchases.

2) Integrate with CRM (Customer Relationship Management) or ERP (Enterprise Resource Planning) backend systems such as Salesforce or Xero.

3) Integrate with a CMS (Content Management System). Currently, content tagging is not supported. 

4) Create Javascript widgets in the magento storefront or on the Admin panel. The widget makes AJAX calls to access service.

How do I get started?

You must register a web service on Admin. Use the following general steps to set up Magento to enable web services.

1. If you are using token-based authentication, create a web services user on Admin by selecting  System > Permission > All Users > Add New User.
(If you are using session-based ot OAuth authentication), you do not need to create the new user in the Admin).

2. Create a new integration in the Admin. To create an integration, click System > Extensions > Integration > Add New Integration**. Be sure to restrict 
which resources the integration can access.

3. Use a REST or SOAP client to configure authentication.

USE REST API's

The magento rest api defines a set of functions that a developer can use to perform requests and abd receive responses. These interattions were performed 
using HTTp protocol.

The caller issues an HTTP request, which contains following elements:-

=> An HTTP header that provides authentication andd other instructions.

=> A verb, which can be onde of GET, POSt, PUT or DELETE.

=> An endpoint, which is uniform Resource Indicator (URI) that identifies the server, the web service, and the resource being acted on.

=> The call payload, which is set of input parameters and attributes that you supply with the request.

Magento returns a request payload as well as an HTTP status code.

You can REST web API calls through CURL commands or a REST client.



API Security

Imposing restrictions on the size and number of resources that a user can request through an API can help mitigate denial-of-service (DoS) 
vulnerabilities. By default, the following built-in API rate limiting is available:

=> REST requests containing inputs that represent a list of entities. When enabled, the default maximum is 20 for synchronous requests and 5,000 for 
asynchronous requests.

=> REST and GraphQL queries that allow paginated results can be limited to a maximum number of items per page. When enabled, the default maximum is 300.

=> REST queries that allow paginated results can have a default number of items per page imposed. When enabled, the default maximum is 20.

By default, these input limits are disabled, but you can use the following methods to enable them:

=> Set the values in Admin

=> Run the "bin/magento config:set" command

=> Add entries to the env.php file.

=> set environmentable variables.

When input limiting has been enabled, the system uses the default value for each limitation listed above. You can also configure custom values.

Although some simple examples for configuring these values from the CLI are provided below, all of these values can be configured per website and per
store view in addition to being configurable globally. In addition, these values can also be configured via "env.php" as well via environment variables.

Enabling the input limiting system

To enable these input limmiting features from the Admin, Go to Stores  > Settings > Configuration > Services > Web Api limits or GraphQL Input Limits 
and set Enable Input Limits "Yes".

To enbale with the CLI run any one of the below command: -

php bin/magento config:set webapi/validation/input_limit_enabled 1
  
  
  or
  
php bin/magento config:set graphql/validation/input_limit_enabled 1

Maximum Paramters Inputs

The "EntryArrayValidator" class construct limits the number of objects that can be given to inputs that represent array of objects. For example,
the "PUT/V1/guest-carts/{cartId}/collect-totals" end point contians the input parameter "additionalData->extension_attributes->gift_messages" which
represents a lost of gift message information objects. 

There are four possible input arrays:

1. additional_data
2. agreement_ids
3. gift_message
4. custom_attributes


{
  "paymentMethod": {
    "po_number": "string",
    "method": "string",
    "additional_data": [
      "string"
    ],
    "extension_attributes": {
      "agreement_ids": [
        "string"
      ]
    }
  },
  "shippingCarrierCode": "string",
  "shippingMethodCode": "string",
  "additionalData": {
    "extension_attributes": {
      "gift_messages": [
        {
          "gift_message_id": 0,
          "customer_id": 0,
          "sender": "string",
          "recipient": "string",
          "message": "string",
          "extension_attributes": {
            "entity_id": "string",
            "entity_type": "string",
            "wrapping_id": 0,
            "wrapping_allow_gift_receipt": true,
            "wrapping_add_printed_card": true
          }
        }
      ]
    },
    "custom_attributes": [
      {
        "attribute_code": "string",
        "value": "string"
      }
    ]
  }
}

By default any one of these arrays can include up to 20 items, but you can change this value in the configuration UI via 
Stores > Settings > Configuration > Services > Web API Limits > Input List Limit or via CLI using the webapi/validation/complex_array_limit configuration
path.

Input limit for REST endpoints

Some REST endpoints can contain a high number of elements, and developers need a way to set the limit for each endpoint. The limit for a specific REST 
endpoint can be set in the webapi.xml configuration file for synchronous requests and webapi_async.xml for asynchronous requests. To do this, assign 
a value for the <data input-array-size-limit/> attribute within a <route> definition. The value for input-array-size-limit must be a non-negative integer.

The following example sets the input limit for .the "/V1/some-custom-route" route. If the route works synchronously, open the <module_dir>/etc/webapi.xml
configuration file. Otherwise, open <module_dir>/etc/webapi_async.xml. Add the data tag with the input-array-size-limit attribute to the roue 
configuration.


<?xml version="1.0"?>
<!--
Some custom module
-->
<routes xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:module:Magento_Webapi:etc/webapi.xsd">
    <route url="/V1/some-custom-route" method="POST">
        <service class="Vendor\Module\Api\EntityRepositoryInterface" method="save"/>
        <resources>
            <resource ref="Vendor_Entity::entities" />
        </resources>
        <data input-array-size-limit="5" /> <!--  limit only for route `/V1/some-custom-route`  -->
    </route>
</routes>


Values by default for REST endpoints

If you need tio change the default limits for REST endpoints, then edit the webapi section of the "<magento_root>/app/etc/env.php" file as follows:-

[
//...
    'webapi' => [
        'sync' => [
            'default_input_array_size_limit' => <non-negative value>, //overrides values for synchronous REST endpoints
        ],
        'async' => [
            'default_input_array_size_limit' => <non-negative value>, //overrides values for asynchronous REST endpoints
        ],
    ]
//...
];

Maximum Page Size

The maximum page setting controls the pagenation of various web API responses. By default, the maximum value is 300. You can change the default in the 
Admin by selecting Stores > Settings > Configuration > Services > Web API input limits or GraphQl Input Limits > Maximum Page Size field.

Default Page Size

The Default page size setting controls the pagination of various web API responses. You can change the default value of 20 in the Admin by selecting 
Stores > Settings > Configuration > Services > Web API input Limits > Default Page Size.

To change the value from the CLI, run the following command:

bin/magento config:set webapi/validation/default_page_size 30


Construct a Request-----------

To configure a web API developers define some of the elements of each API call in the "<module rootdir>/vendor/<vendor-name>/<module-name>/etc/webapi.xml"
file, where <vendor-name> is your vendor name and <module-name> is your module name. For example the web API for the customers service is defined in the
<magento_root>/vendor/magento/module-customer/etc/webapi.xml  configuratin file. Service and data interfaces and builder define the required and optional
paramters and return the values for the API calls.

---------Overview---------

The following tables and sections that follow the table describe web API call elements:-

Element                 Specifies

1. HTTP verb            The action to perform aganist the endpoint.

2. Endpoint             A combination of the server that fullfills a request, the web service, and the resource aganist which the request is being made.

3. HTTP headers         The authentication token, the call request and response formats, and other information.

4. Call Payload.         A set of input parameters and attributes that you supply with the request. API operations have both "required" and "optional"
                         inputs. You can specify input parameters in the URL and input attributes in a request body. You can specify a JSON- or XML-formatted
                         request body.


HTTP verb

Get -> Requests transfer of a current representation of the target resource. If you omit the verb, GET is the default.

Put -> Requests that the state of the target resource be created or replaced with the state defined by the representation enclosed in the request 
message payload.

Post -> Requests that the origin server accept the representation enclosed in the request as data to be processed by the target resource.

Delete -> Requests that the origin server delete the target resource.

Endpoint

An endpoint is a combination of the server that fulfills a request, the web service, the store code, the resource against which the request is being 
made, and any template parameters.

For example, in the http://magento.ll/index.php/rest/default/V1/customerGroups/:id endpoint, the server is magento.ll/index.php/, the web service is 
rest, the resource is /V1/customerGroups, and the template parameter is id.

A store code can have the following values:-

=> The store's assigned store code.

=> default -> This is the default value when no store code is provided.

=> all -> This values only to endpoints defined in the CMS and product modules. If this value is specified, the API call affects all of the merchants 
store.

HTTP headers

To specify an HTTP header in a cURL command, use the -H option.

   HTTP Header                                Description                                                                Syntax

1. Authorization      Required, except for calls made on behalf of a guest. Specifies the authentication   Authorization: Bearer <TOKEN>
                      token that proves you as the owner of a Magento account. You specify the token in   <TOKEN> is the authentication token returned by 
                      the Authorization request header with the Bearer HTTP authorization scheme.        the Magento token service. See Authentication.

2. Accept.            Optional. Specifies the format of the response body. Default is JSON.               Accept: application/<FORMAT>
                                                                                                          <FORMAT> is either JSON or XML
                                                                                                          
                                                                                                          
3. Content-Type    Required for operations with a request body. Specifies the format of the request     Content-Type:application/<FORMAT>
                   body.                                                                                <FORMAT> is either JSON or XML.
                   
4. X-Captcha.      A shopper-entered CAPTCHA value. It is required when a shopper enters a
                   CAPTCHA value on the frontend, unless an integration token is provided.              string
                   Forms requiring CAPTCHA values are configured at
                   Stores > Configuration > Customers > Customer Configuration > CAPTCHA > Forms.
                   
                   
Call Payload

The call payload is a set of input parameters and attributes that you supply with the request. API operations have both required and optional inputs.

You specify input parameters in the URI. For example, in the GET/V1/customers/:customerId URI, you must specify the customerId template parameter. This 
parameter filters the response by the specified customer ID.

You specify input attributes in a JSON- or XML-formatted request body. For example, in the POST /V1/customers call, you must specify a request body 
like this:

{
    "customer": {
        "email": "user@example.com",
        "firstname": "John",
        "lastname": "Doe"
    },
    "addresses": [
        {
            "defaultShipping": true,
            "defaultBilling": true,
            "firstname": "John",
            "lastname": "Doe",
            "region": {
                "regionCode": "CA",
                "region": "California",
                "regionId": 12
            },
            "postcode": "90001",
            "street": ["Zoe Ave"],
            "city": "Los Angeles",
            "telephone": "555-000-00-00",
            "countryId": "US"
        }
    ]
}

This JSON-formatted request body includes a customer object with the customer email, first name, and last name, and customer address information. The 
information in this request body is used to populate the new customer account.

CONSTRUCT A REQUEST

This example shows you how to construct a REST web API call to create an account

1. Open the Magento/Customer/etc/webapi.xml

2. Find the route element that defines the createAccount call:

<route url="/V1/customers" method="POST">
   <service class="Magento\Customer\Api\AccountManagementInterface" method="createAccount"/>
   <resources>
      <resource ref="anonymous"/>
   </resources>
</route>

3. Use the method and url values on the route element to construct the URI. In this example, the URI is POST /V1/customers.

4. Use the class attribute on the service element to identify the service interface. In this example, the service interface is the AccountManagementInterface PHP file.

Open the AccountManagementInterface.php file and find the createAccount method, as follows:

public function createAccount(
     \Magento\Customer\Api\Data\CustomerInterface $customer,
     $password = null,
     $redirectUrl = ''
 )
 
 The createAccount call requires a customer data object. The password and redirectUrl values are optional. The default password value is null and the 
 default redirectUrl value is blank.
                   
 5. To pass the customer data object in the POST call payload, specify JSON or XML request body on the call.
 
 Customers Search API request Example
 
 
 The following example builds a Customers Search request based on search criteria. It returns a list of customers that match given search criteria.
 
 1. Prepare Authorization, Accept and Content-Type headers to be passed to a request object. Use the Authorization token returned by the Magento 
 token service.
 
$token = 'token';
$httpHeaders = new \Zend\Http\Headers();
$httpHeaders->addHeaders([
   'Authorization' => 'Bearer ' . $token,
   'Accept' => 'application/json',
   'Content-Type' => 'application/json'
]);


2. Open the Magento/Customer/etc/webapi.xml configuration file and find the CustomerRepositoryInterface interface with the getList method.

3. Set the headers, URI and method to a request object. Use URI /V1/customers/search and method GET values. Use the searchCriteria parameter to 
complete the Customer Search query. See searchCriteria usage.

The following example finds customers whose first name contains “ver” or whose last name contains “Costello”.

$request = new \Zend\Http\Request();
$request->setHeaders($httpHeaders);
$request->setUri('http://magento.ll/rest/V1/customers/search');
$request->setMethod(\Zend\Http\Request::METHOD_GET);

 $params = new \Zend\Stdlib\Parameters([
     'searchCriteria' => [
         'filterGroups' => [
             0 => [
                 'filters' => [
                     0 => [
                         'field' => 'firstname',
                         'value' => '%ver%',
                         'condition_type' => 'like'
                     ],
                     1 => [
                         'field' => 'lastname',
                         'value' => '%Costello%',
                         'condition_type' => 'like'
                     ]
                 ]
             ]
         ],
         'current_page' => 1,
         'page_size' => 10
     ],
 ]);

 $request->setQuery($params);

 
 4. Prepare a HTTP Curl client object and pass the request object to Client::send() method.
 
 $client = new \Zend\Http\Client();
$options = [
   'adapter'   => 'Zend\Http\Client\Adapter\Curl',
   'curloptions' => [CURLOPT_FOLLOWLOCATION => true],
   'maxredirects' => 0,
   'timeout' => 30
 ];
 $client->setOptions($options);

 $response = $client->send($request);
 
 This request returns a list of all customers in JSON format, as shown below. You can also specify XML format by changing Accept header of the request.

{
    "items": [
        {
            "id": 1,
            "group_id": 1,
            "default_billing": "1",
            "default_shipping": "1",
            "created_at": "2017-12-05 09:50:11",
            "updated_at": "2018-09-22 06:32:50",
            "created_in": "Default Store View",
            "dob": "1973-12-15",
            "email": "roni_cost@example.com",
            "firstname": "Veronica",
            "lastname": "Costello",
            "gender": 2,
            "store_id": 1,
            "website_id": 1,
            "addresses": [
                {
                    "id": 1,
                    "customer_id": 1,
                    "region": {
                        "region_code": "MI",
                        "region": "Michigan",
                        "region_id": 33
                    },
                    "region_id": 33,
                    "country_id": "US",
                    "street": [
                        "6146 Honey Bluff Parkway"
                    ],
                    "telephone": "(555) 229-3326",
                    "postcode": "49628-7978",
                    "city": "Calder",
                    "firstname": "Veronica",
                    "lastname": "Costello",
                    "default_shipping": true,
                    "default_billing": true
                },
                {
                    "id": 19,
                    "customer_id": 1,
                    "region": {
                        "region_code": "London ",
                        "region": "London ",
                        "region_id": 0
                    },
                    "region_id": 0,
                    "country_id": "GB",
                    "street": [
                        "1 Studio 103 The Business Centre 61"
                    ],
                    "telephone": "1234567890",
                    "postcode": "CF24 3DG",
                    "city": "Tottenham ",
                    "firstname": "Veronica",
                    "lastname": "Costello"
                }
            ],
            "disable_auto_group_change": 0
        }
    ],
    "search_criteria": {
        "filter_groups": [
            {
                "filters": [
                    {
                        "field": "firstname",
                        "value": "%ver%",
                        "condition_type": "like"
                    }
                ]
            }
        ]
    },
    "total_count": 1
}


 USE cURL TO RUN THE REQUEST
 
 cURL is the command line-tool that lets you transmit HTTP requests and responses from the command line or a shell script. It is avalibale for 
 linux distributions, Mac OS and windows.
 
 To use cURL to run your REST web API call, use the cURL command syntax to construct the command. 
 
 To create the endpoint in the call, append the REST URI that you constructed in Construct a request to this URL:
 
 "https://<MAGENTO_HOST_OR_IP>/<MAGENTO_BASE_INSTALL_DIR>/rest/"
 
 To pass the customer data objects in the POST call payload, specify a json or XML request body on the call.
 
 CURL examples:- 
 
    Option.           Description
 
 1. -d -data         Send the specified data in a POST request to the HTTP server. Use this option to send a JSON or XML request body to the server.
 
 2. -H -header.      Specifies an extra HTTP header in the request. Precede each header with the -H option. You can specify any number of extra headers
                     For a list of common headers used in Magento web API requests.
                     
 3. -i -input        Includes the HTTP header in the output.
 
 4. -s -silent.      Specifies slinet or quite mode, which makes cURL mute. Progress and error messages are surpassed.
 
 5. -T -uploadfile  Transfers the specified local file to the remote cURL.
 
 6. -X -request     Specifies the request method to use when communicating with HTTP server. The specified request method is used instead of the default
                     GET method.
                     
==> USING cURL in Magento 

Magento provides its own service-wrapper for using cURL instead of using the default PHP cURL. The class "Magento\Framework\HTTP\Client\Curl"
may be used to work with HTTP protocol using cURL library. First, create an instance of "Magento\Framework\HTTP\Client\Curl"

/**
* Constructor.
*
* @param Magento\Framework\HTTP\Client\Curl $curl
*/
public function __construct(
   Magento\Framework\HTTP\Client\Curl $curl
) {
   $this->curl = $curl;
}

==> Make GET request using cURL

// get method
$this->curl->get($url);

// output of curl request
$result = $this->curl->getBody();


where $url is the endpoint URL

==> Make POST request cURL

// post method
$this->curl->post($url, $params);

// output of curl requestt
$result = $this->curl->getBody();

where $url is the endpoint URL, $params is the array of data that is being sent via the POST request. Other parameters may be added in the URL directly.
A $params example:

$params = [
  'user[email]' => $user->getEmail(),
  'user[cellphone]' => $providerInfo['phone_number'],
  'user[country_code]' => $providerInfo['country_code'],
]

The cURL client can also add headers, basic authorization, additonal cURL options, and cookies in the cURL request. The cURL client provides these methods 
before using get or post method.

==> Set cURL header using addHeader method

The header accepts two parameters. The cURL header name and a cURL header value.

$this->curl->addHeader("Content-Type", "application/json");
$this->curl->addHeader("Content-Length", 200);

==> Set cURL header using setHeaders method

The setHeaders method accepts an array as a parametter.

$headers = ["Content-Type" => "application/json", "Content-Length" => "200"];
$this->curl->setHeaders($headers);

==> Set basic authorization in cURL

Set the basic authorization using the setCredentials method.

$userName = "User_Name";
$password = "User_Password";

$this->curl->setCredentials($userName, $password);

Is equivalent to setting CURLOPT_HTTPHEADER value:

"Authorization : " . "Basic " . base64_encode($userName . ":" . $password)

==> Set cURL option using setOption method

The setOption method accepts two parameters. The cURL option name and the cURL option value.

$this->curl->setOption(CURLOPT_RETURNTRANSFER, true);
$this->curl->setOption(CURLOPT_PORT, 8080);

==> Set cURL option using setOptions method

The setOptions method acccepts an array as paramter

$options = [CURLOPT_RETURNTRANSFER => true, CURLOPT_PORT => 8080];

$this->curl->setOptions($options);



==> Set cURL cookies using addCookie method

The addCookie method accepts an array as a parameter. The cookie name and the cookie value.

$this->curl->addCookie("cookie-name", "cookie-value");

==> Set cURL cookies using setCookies method

The setCookies method accepts an array as a parameter.

$cookies = ["cookie-name-1" => "cookie-value-1", "cookie-name-2" => "cookie-value-2"];
$this->curl->setCookies($cookies);

How to use cURL with Magento

For example, the Magento\Marketplace\Model\Partners class gets partners info using cURL from the api of Magento connect.

namespace Magento\Marketplace\Model;

use Magento\Framework\HTTP\Client\Curl;
use Magento\Marketplace\Helper\Cache;
use Magento\Backend\Model\UrlInterface;

/**
 * @api
 * @since 100.0.2
 */
class Partners
{
    /**
     * @var Curl
     */
    protected $curlClient;

    /**
     * @var string
     */
    protected $urlPrefix = 'https://';

    /**
     * @var string
     */
    protected $apiUrl = 'magento.com/magento-connect/platinumpartners/list';

    /**
     * @var \Magento\Marketplace\Helper\Cache
     */
    protected $cache;

    /**
     * @param Curl $curl
     * @param Cache $cache
     * @param UrlInterface $backendUrl
     */
    public function __construct(Curl $curl, Cache $cache, UrlInterface $backendUrl)
    {
        $this->curlClient = $curl;
        $this->cache = $cache;
        $this->backendUrl = $backendUrl;
    }

    /**
     * @return string
     */
    public function getApiUrl()
    {
        return $this->urlPrefix . $this->apiUrl;
    }

    /**
     * Gets partners json
     *
     * @return array
     */
    public function getPartners()
    {
        $apiUrl = $this->getApiUrl();
        try {
            $this->getCurlClient()->post($apiUrl, []);
            $this->getCurlClient()->setOptions(
                [
                    CURLOPT_REFERER => $this->getReferer()
                ]
            );
            $response = json_decode($this->getCurlClient()->getBody(), true);
            if ($response['partners']) {
                $this->getCache()->savePartnersToCache($response['partners']);
                return $response['partners'];
            } else {
                return $this->getCache()->loadPartnersFromCache();
            }
        } catch (\Exception $e) {
            return $this->getCache()->loadPartnersFromCache();
        }
    }

    /**
     * @return Curl
     */
    public function getCurlClient()
    {
        return $this->curlClient;
    }

    /**
     * @return cache
     */
    public function getCache()
    {
        return $this->cache;
    }

    /**
     * @return string
     */
    public function getReferer()
    {
        return \Magento\Framework\App\Request\Http::getUrlNoScript($this->backendUrl->getBaseUrl())
        . 'admin/marketplace/index/index';
    }
}

First off all the cURL client instance is created in __construct. Method getPartners uses the cURL client makes POST request using cURL, the post method 
takes the first parameter the URL to the api of Magento connect, second parameter is empty array, then the option CURLOPT_REFERER added by setOptions 
method of the cURL client. As result the script call getBody method of the cURL client.





 
