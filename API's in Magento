The Magnto web API framework provides integrators and developers the means to use web services that communicate with the Magento system. Key features 
include:

=> Support GraphQL, REST (Representational State Transfer) and SOAP (Simple Object Access Protocol). In Magento Web API coverage is the same for both REST
and SOAP.

There are three types of authentiation:

1) Third part applications authenticate with OAuth 1.0a.
2) Mobile applications authenticate using tokens.
3) Adminstrators and Customersmare authenticated with login credintals.

=> All accounts and integrations are assigned resources that they have access to. The API framework checks that any call has the authorization to perform the
request.

=> Any magento or third-party service can be configured as "webAPI" with afew lines of xml. To configure a webapi you define XML elements and attributes 
in a "webapi.xml" configuration file. If a service is not defined in a configuration file, it will not be exposed at all.

=>The framework is based on the CURD(create, update, read, delete) & search model. The system does not currently support webhooks.

=> The framework supports field filtering of web API responses to conserve mobile bandwidth.

=> Integartion style web APIs enable a single web API call to run multiple services at once for a efficient integration. An example of this behaviour can be
seen in the catalog. Where one web API call can create a product. If your payload includes the stock_item and media_gallery_entries objects, then the 
framework will also create the products inventory and media in that one API call.

What can I do with the Magento web APIs?

The APIs can be used to perform a wide array of tasks. For example:

1) Creating a shopping app. This can be a additional app that a user downloads on a mobile device. You could also create an app that an employee uses
on a showroom floor to help customers make purchases.

2) Integrate with CRM (Customer Relationship Management) or ERP (Enterprise Resource Planning) backend systems such as Salesforce or Xero.

3) Integrate with a CMS (Content Management System). Currently, content tagging is not supported. 

4) Create Javascript widgets in the magento storefront or on the Admin panel. The widget makes AJAX calls to access service.

How do I get started?

You must register a web service on Admin. Use the following general steps to set up Magento to enable web services.

1. If you are using token-based authentication, create a web services user on Admin by selecting  System > Permission > All Users > Add New User.
(If you are using session-based ot OAuth authentication), you do not need to create the new user in the Admin).

2. Create a new integration in the Admin. To create an integration, click System > Extensions > Integration > Add New Integration**. Be sure to restrict 
which resources the integration can access.

3. Use a REST or SOAP client to configure authentication.

USE REST API's

The magento rest api defines a set of functions that a developer can use to perform requests and abd receive responses. These interattions were performed 
using HTTp protocol.

The caller issues an HTTP request, which contains following elements:-

=> An HTTP header that provides authentication andd other instructions.

=> A verb, which can be onde of GET, POSt, PUT or DELETE.

=> An endpoint, which is uniform Resource Indicator (URI) that identifies the server, the web service, and the resource being acted on.

=> The call payload, which is set of input parameters and attributes that you supply with the request.

Magento returns a request payload as well as an HTTP status code.

You can REST web API calls through CURL commands or a REST client.



API Security

Imposing restrictions on the size and number of resources that a user can request through an API can help mitigate denial-of-service (DoS) 
vulnerabilities. By default, the following built-in API rate limiting is available:

=> REST requests containing inputs that represent a list of entities. When enabled, the default maximum is 20 for synchronous requests and 5,000 for 
asynchronous requests.

=> REST and GraphQL queries that allow paginated results can be limited to a maximum number of items per page. When enabled, the default maximum is 300.

=> REST queries that allow paginated results can have a default number of items per page imposed. When enabled, the default maximum is 20.

By default, these input limits are disabled, but you can use the following methods to enable them:

=> Set the values in Admin

=> Run the "bin/magento config:set" command

=> Add entries to the env.php file.

=> set environmentable variables.

When input limiting has been enabled, the system uses the default value for each limitation listed above. You can also configure custom values.

Although some simple examples for configuring these values from the CLI are provided below, all of these values can be configured per website and per
store view in addition to being configurable globally. In addition, these values can also be configured via "env.php" as well via environment variables.

Enabling the input limiting system

To enable these input limmiting features from the Admin, Go to Stores  > Settings > Configuration > Services > Web Api limits or GraphQL Input Limits 
and set Enable Input Limits "Yes".

To enbale with the CLI run any one of the below command: -

php bin/magento config:set webapi/validation/input_limit_enabled 1
  
  
  or
  
php bin/magento config:set graphql/validation/input_limit_enabled 1

Maximum Paramters Inputs

The "EntryArrayValidator" class construct limits the number of objects that can be given to inputs that represent array of objects. For example,
the "PUT/V1/guest-carts/{cartId}/collect-totals" end point contians the input parameter "additionalData->extension_attributes->gift_messages" which
represents a lost of gift message information objects. 

There are four possible input arrays:

1. additional_data
2. agreement_ids
3. gift_message
4. custom_attributes


{
  "paymentMethod": {
    "po_number": "string",
    "method": "string",
    "additional_data": [
      "string"
    ],
    "extension_attributes": {
      "agreement_ids": [
        "string"
      ]
    }
  },
  "shippingCarrierCode": "string",
  "shippingMethodCode": "string",
  "additionalData": {
    "extension_attributes": {
      "gift_messages": [
        {
          "gift_message_id": 0,
          "customer_id": 0,
          "sender": "string",
          "recipient": "string",
          "message": "string",
          "extension_attributes": {
            "entity_id": "string",
            "entity_type": "string",
            "wrapping_id": 0,
            "wrapping_allow_gift_receipt": true,
            "wrapping_add_printed_card": true
          }
        }
      ]
    },
    "custom_attributes": [
      {
        "attribute_code": "string",
        "value": "string"
      }
    ]
  }
}

By default any one of these arrays can include up to 20 items, but you can change this value in the configuration UI via 
Stores > Settings > Configuration > Services > Web API Limits > Input List Limit or via CLI using the webapi/validation/complex_array_limit configuration
path.

Input limit for REST endpoints

Some REST endpoints can contain a high number of elements, and developers need a way to set the limit for each endpoint. The limit for a specific REST 
endpoint can be set in the webapi.xml configuration file for synchronous requests and webapi_async.xml for asynchronous requests. To do this, assign 
a value for the <data input-array-size-limit/> attribute within a <route> definition. The value for input-array-size-limit must be a non-negative integer.

The following example sets the input limit for .the "/V1/some-custom-route" route. If the route works synchronously, open the <module_dir>/etc/webapi.xml
configuration file. Otherwise, open <module_dir>/etc/webapi_async.xml. Add the data tag with the input-array-size-limit attribute to the roue 
configuration.


<?xml version="1.0"?>
<!--
Some custom module
-->
<routes xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:module:Magento_Webapi:etc/webapi.xsd">
    <route url="/V1/some-custom-route" method="POST">
        <service class="Vendor\Module\Api\EntityRepositoryInterface" method="save"/>
        <resources>
            <resource ref="Vendor_Entity::entities" />
        </resources>
        <data input-array-size-limit="5" /> <!--  limit only for route `/V1/some-custom-route`  -->
    </route>
</routes>


Values by default for REST endpoints

If you need tio change the default limits for REST endpoints, then edit the webapi section of the "<magento_root>/app/etc/env.php" file as follows:-

[
//...
    'webapi' => [
        'sync' => [
            'default_input_array_size_limit' => <non-negative value>, //overrides values for synchronous REST endpoints
        ],
        'async' => [
            'default_input_array_size_limit' => <non-negative value>, //overrides values for asynchronous REST endpoints
        ],
    ]
//...
];

Maximum Page Size

The maximum page setting controls the pagenation of various web API responses. By default, the maximum value is 300. You can change the default in the 
Admin by selecting Stores > Settings > Configuration > Services > Web API input limits or GraphQl Input Limits > Maximum Page Size field.

Default Page Size

The Default page size setting controls the pagination of various web API responses. You can change the default value of 20 in the Admin by selecting 
Stores > Settings > Configuration > Services > Web API input Limits > Default Page Size.

To change the value from the CLI, run the following command:

bin/magento config:set webapi/validation/default_page_size 30





