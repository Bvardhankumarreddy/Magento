In Magento 2, modules will be live in app/code directory of a Magento installation, with this format: app/code/<Vendor>/<ModuleName>.

Module:- The module is a directory that contains blocks, controllers, models, helper, etc - that are related to a specific business feature. 
The etc folder contains admin ACL, admin menu, configuration. 

Vendor:- The vendor can provide all information about the store, as well as design the profile page by adding their logo, banner, etc. 
Product creation and promo options. Allow your vendors to create any type of product: configurable, bundle, grouped, simple, downloadable, and virtual.

Controller specially is one of the important thing in Module development series, and PHP MVC Framework in general. It functionarity is that received 
request, process and render page.

In Magento 2 Controller has one or more files in Controller folder of module, it includes actions of class which contain execute() method. There are 2 
different controllers, they are frontend controller and backend controller. They are generally similar of workflow, but admin controller is a little
different. There is a checking permission method in admin controller, it calls form key.


How Controller works?

It receive an request from end-user (browser or comamnd line), for example: http://example.com/route_name/controller/action

=> route_name is a unique name which is set in routes.xml.
=> controller is the folder inside Controller folder.
=> action is a class with execute method to process request.

One of the important in Magento system is frontController (Magento\Framework\App\FrontController), it alway receives request then route controller, 
action by route_name Let’s take an example of routing an request:

foreach ($this->_routerList as $router) {
   try {
      $actionInstance = $router->match($request);
   …
}

If there is an action of controller class found, execute() method will be run.

File Structure inside the Module

Module
1)Block
2)Controllers
3)etc
     a)adminhtml
               i)menu.xml
               ii)routes.xml
               iii)system.xml
     b)frontend
               i)routes.xml
     c)acl.xml (ACL -> Access Control List)
     d)config.xml
     e)di.xml
     f)module.xml
     g)events.xml
4)View
      a)layout
      b)template
           file.phtml
5)Helper
6)i18n
7)Model
8)Setup
9)view
10)Plugin
11)composer.json
12)registration.php


Composer.json => Composer the ability to install this module, its dependency and another meta data.
 
     dependency => A dependency is an additional code that a programmer wants to call.

Registration.php => this file registers the module with magento

Block => It contains php view classes as part of MVC.

Controller => It contains php controller classes as part of MVC

etc => It contains configuration files like as module.xml, menu.xml, system.xml, routes.xml, events.xml etc

etc/module.xml => This file specifies the name and setup version of this module, as well as dependency

etc/acl.xml => The acl.xml file defines the access control list (ACL) for a given module. It defines the avaliable set of permissions to access the
               resources.
               
etc/config.xml => It's system configuration

etc/di.xml  => The di.xml file configures whih dependencies to inject by the object manager. Each module can have a global and area-specific 
     
