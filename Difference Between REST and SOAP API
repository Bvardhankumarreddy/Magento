1. SOAP stands for Simple Object Protocol and REST stands for Respresentational State Transfer
2. SOAP is a protocol where as REST is a architectural pattern.
3. SOAP uses service interface to expose its functionality to client applications while REST uses uniform service locators to access the components
on the hardware device.
4. SOAP needs more bandwidth for its usage whereas REST doesn't use much bandwidth.
5. SOAP only works in XML formats whereas REST work with plain text, XML, HTML and JSON.
6. SOAP cannot make use of REST but REST can make use of SOAP.

What is SOAP?

SOAP is a protocol that is designed before REST and came into the picture. The main idea behind designing SOAP was to ensure that programs built on
different platforms and programming languages could exchange data in an easy manner. 

What is REST?

REST was designed specialfly for working with components such as media components, files or even objects on a particular hardware device. Any web service
that is defined on the principles of REST can be called a Restful Web Service. A Restful service would use the normal HTTP verbs of GET, POST, PUT and 
DELETE for working with required components. 


                 SOAP                                                                                REST

1. SOAP is a protocol. SOAP was designed with a specification. It           REST is an Architectural style in which a web service can
   includes a WSDL file which has the required information on what          only be treated as a RESTful service if it follows the constraints of being
   the web service does in addition to the location of the web service.     1.Client Server,2. Stateless,3. Cacheable,4.Layered System,5.Uniform Interface
   

2. SOAP cannot make use of REST since SOAP is a protocol and REST is        REST can make use of SOAP as the underlying protocol for web services, because 
   an architectural pattern.                                                in the end it is just an architectural pattern.
   

3. SOAP uses service interfaces to expose its functionality to client       REST use Uniform Service locators to access to the components on the
   applications. In SOAP, the WSDL file provides the client with the        hardware device. For example, if there is an object which represents the 
   necessary information which can be used to understand what services      data of an employee hosted on a URL as http://demo.guru99 , the below are
   the web service can offer.                                               some of URI that can exist to access them.
                                                                            http://demo.guru99.com/Employee
                                                                            
                                                                            http://demo.guru99.com/Employee/1
 
 4. SOAP requires more bandwidth for its usage. Since SOAP Messages.        REST does not need much bandwidth when requests are sent to the server.
    contain a lot of information inside of it, the amount of data           REST messages mostly just consist of JSON messages. Below is an example
    transfer using SOAP is generally a lot.                                 of a JSON message passed to a web server. You can see that the size of the
                                                                            message is comparatively smaller to SOAP.
                                                                            
<?xml version="1.0"?>                                                       {"city":"Mumbai","state":"Maharastra"}
<SOAP-ENV:Envelope 
xmlns:SOAP-ENV
="http://www.w3.org/2001/12/soap-envelope" 
SOAP-ENV:encodingStyle
=" http://www.w3.org/2001/12/soap-encoding">
<soap:Body>
 <Demo.guru99WebService
 xmlns="http://tempuri.org/">
   <EmployeeID>int</EmployeeID>
   </Demo.guru99WebService>
 </soap:Body>
</SOAP-ENV:Envelope>
 
5. SOAP can only work with XML format. As seen from SOAP messages,         REST permits different data format such as Plain text, HTML, XML, JSON, etc.
   all data passed is in XML format.                                       But the most preferred format for transferring data is JSON.
   
   
when to use REST?

One of the most highly debatable topics is when REST should be used or when to use SOAP while designing web services. Below are some of the key factors 
that determine when REST and SOAP API technology should be used for web services REST services should be used in the following instances

=> Limited resources and bandwidth – Since SOAP messages are heavier in content and consume a far greater bandwidth, REST should be used in instances 
where network bandwidth is a constraint.

=> Statelessness – If there is no need to maintain a state of information from one request to another then REST should be used. If you need a proper 
information flow wherein some information from one request needs to flow into another then SOAP is more suited for that purpose. We can take the example 
of any online purchasing site. These sites normally need the user first to add items which need to be purchased to a cart. All of the cart items are 
then transferred to the payment page in order to complete the purchase. This is an example of an application which needs the state feature. The state of 
the cart items needs to be transferred to the payment page for further processing.

=> Caching – If there is a need to cache a lot of requests then REST is the perfect solution. At times, clients could request for the same resource 
multiple times. This can increase the number of requests which are sent to the server. By implementing a cache, the most frequent queries results can be 
stored in an intermediate location. So whenever the client requests for a resource, it will first check the cache. If the resources exist then, it will 
not proceed to the server. So caching can help in minimizing the amount of trips which are made to the web server.

=> Ease of coding – Coding REST Services and subsequent implementation is far easier than SOAP. So if a quick win solution is required for web services,
then REST is the way to go.


When to use REST?

SOAP should be used in the following instances

=> Asynchronous processing and subsequent invocation – if there is a requirement that the client needs a guaranteed level of reliability and security then 
the new SOAP standard of SOAP 1.2 provides a lot of additional features, especially when it comes to security.

=> A Formal means of communication – if both the client and server have an agreement on the exchange format then SOAP 1.2 gives the rigid specifications 
for this type of interaction. An example is an online purchasing site in which users add items to a cart before the payment is made. Let’s assume we 
have a web service that does the final payment. There can be a firm agreement that the web service will only accept the cart item name, unit price, and 
quantity. If such a scenario exists then, it’s always better to use the SOAP protocol.

=> Stateful operations – if the application has a requirement that state needs to be maintained from one request to another, then the SOAP 1.2 standard
provides the WS* structure to support such requirements.


Challanges in REST API

=> Lack of Security – REST does not impose any sort of security like SOAP. This is why REST is very appropriate for public available URL’s, but when it 
comes down to confidential data being passed between the client and the server, REST is the worst mechanism to be used for web services.

=> Lack of state – Most web applications require a stateful mechanism. For example, if you had a purchasing site which had the mechanism of having a shopping cart, it is required to know 
the number of items in the shopping cart before the actual purchase is made. Unfortunately, the burden of maintaining this state lies with the client, 
which just makes the client application heavier and difficult to maintain.

Challanges in SOAP API

API is known as the Application Programming Interface and is offered by both the client and the server. In the client world, this is offered by the 
browser whereas in the server world it’s what is provided by the web service which can either be SOAP or REST.

=> WSDL file – One of the key challenges of the SOAP API is the WSDL document itself. The WSDL document is what tells the client of all the operations 
that can be performed by the web service. The WSDL document will contain all information such as the data types being used in the SOAP messages and what 
all operations are available via the web service. The below code snippet is just part of a sample WSDL file.

<?xml version="1.0"?>
<definitions name="Tutorial"             
	targetNamespace=http://demo.guru99.com/Tutorial.wsdl             
	xmlns:tns=http://demo.guru99.com/Tutorial.wsdl             
	xmlns:xsd1=http://demo.guru99.com/Tutorial.xsd            
	xmlns:soap=http://schemas.xmlsoap.org/wsdl/soap/
	xmlns="http://schemas.xmlsoap.org/wsdl/"> 

	<types>  
		<schema targetNamespace=http://Demo.guru99.com/Tutorial.xsd
		xmlns="http://www.w3.org/2000/10/XMLSchema">

      	<element name="TutorialNameRequest">    
			<complexType>          
				<all>           
					<element name="TutorialName" type="string"/>         
				</all>       
			</complexType>    
		</element>     
	<element name="TutorialIDRequest">        
		<complexType>          
			<all>           
				<element name="TutorialID" type="number"/>         
			</all>       
		</complexType>      
	</element>   
	</schema>  
</types>

As per the above WSDL file, we have an element called “TutorialName” which is of the type String which is part of the element TutorialNameRequest.

Now, suppose if the WSDL file were to change as per the business requirements and the TutorialName has to become TutorialDescription. This would mean 
that all the clients who are currently connecting to this web service would then need to make this corresponding change in their code to accommodate the
change in the WSDL file.

This shows the biggest challenge of the WSDL file which is the tight contract between the client and the server and that one change could cause a large 
impact, on the whole, client applications.

=> Document size – The other key challenge is the size of the SOAP messages which get transferred from the client to the server. Because of the large 
messages, using SOAP in places where bandwidth is a constraint can be a big issue.







 
 
   
